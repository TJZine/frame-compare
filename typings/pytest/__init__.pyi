from typing import Any, Callable, ContextManager, Sequence, TypeVar

F = TypeVar("F", bound=Callable[..., Any])


class MonkeyPatch:
    def setattr(self, target: object, name: str, value: object) -> None: ...
    def delattr(self, target: object, name: str, raising: bool = ...) -> None: ...
    def setenv(self, name: str, value: str, *, prepend: bool = ...) -> None: ...
    def getenv(self, name: str, default: str | None = ...) -> str | None: ...
    def undo(self) -> None: ...


def fixture(*args: Any, **kwargs: Any) -> Callable[[F], F]: ...


class _MarkModule:
    def parametrize(self, *args: Any, **kwargs: Any) -> Callable[[F], F]: ...


mark: _MarkModule


def raises(exception: type[BaseException], *args: Any, **kwargs: Any) -> ContextManager[Any]: ...


def approx(expected: Any, *args: Any, **kwargs: Any) -> Any: ...


class LogCaptureFixture:
    def at_level(self, *args: Any, **kwargs: Any) -> ContextManager[Any]: ...
    @property
    def messages(self) -> Sequence[str]: ...
